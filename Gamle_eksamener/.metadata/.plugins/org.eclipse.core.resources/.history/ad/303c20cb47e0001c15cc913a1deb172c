import static org.junit.jupiter.api.Assertions.*;

import java.util.Random;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import Ekstra.LinearNode;

class SorterTest {

	Integer[] tab = new Integer[100];
	LinearNode<Integer> rot =  new LinearNode<Integer>(10);
	
	@BeforeEach
	public void stokk() {
		Random ran = new Random();
		for (int i = 0; i<tab.length; i++) {
			tab[i] = ran.nextInt();
		}
	}
	
	public void leggTilNoder(LinearNode<Integer> rot, int i) {
		if (i<100) {
		Random ran = new Random();
			LinearNode<Integer> nyNode = new LinearNode<Integer>(ran.nextInt());
			rot.setNeste(nyNode);
			leggTilNoder(rot.getNeste(), i+1);
		}
	}
	
	@Test
	void IterativeSelectionSortTest() {
		Sorter.IterativeSelectionSort(tab);
		assertTrue(Sorter.erSortert(tab));
	}
	
	@Test
	void recSelectionSortTest() {
		Sorter.SelectionSortRek(tab);
		assertTrue(Sorter.erSortert(tab));
	}
	
	@Test
	void IterativeInsertionSortTest() {
		Sorter.IterativeInsertionSort(tab);
		assertTrue(Sorter.erSortert(tab));
	}
	
	@Test
	void InsertionSortRec() {
		Sorter.recInsertionSort(tab);
		assertTrue(Sorter.erSortert(tab));
	}
	
@Test
void ShellsortTest() {
	Sorter.IterativeShellSort(tab);
	assertTrue(Sorter.erSortert(tab));
}

@Test 
void mergeSortTest() {
	Integer[] temp = new Integer[tab.length+1];
	Sorter.recursiveMergeSort(tab,  0, tab.length);
	assertTrue(Sorter.erSortert(tab));
}

}
